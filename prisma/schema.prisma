generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PokerTournament {
  id              Int       @id @default(autoincrement())
  name            String?   @map("Name") @db.VarChar(255)
  uid             String?   @map("UID") @db.VarChar(255)
  bustTime        BigInt?   @map("Bust_Time")
  bustRound       Int?      @map("Bust_Round")
  hitman          String?   @map("Hitman") @db.VarChar(255)
  placement       Int?      @map("Placement")
  knockouts       Int?      @map("Knockouts")
  startPoints     Int?      @map("Start_Points")
  hitPoints       Int?      @map("Hit_Points")
  placementPoints Int?      @map("Placement_Points")
  cash            Int?      @map("Cash")
  place           String?   @map("Place") @db.VarChar(50)
  season          String?   @map("Season") @db.VarChar(100)
  venue           String?   @map("Venue") @db.VarChar(255)
  totalPoints     Int?      @map("Total_Points")
  playerScore     Float?    @map("Player_Score") @db.Float
  fileName        String?   @map("File_name") @db.VarChar(255)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  gameDate        DateTime? @map("game_date") @db.Date
  gameUid         String?   @map("game_uid") @db.VarChar(100)

  @@map("poker_tournaments")
}

model ProcessedFile {
  id                  Int       @id @default(autoincrement())
  filename            String    @unique(map: "filename") @db.VarChar(255)
  processed_at        DateTime  @default(now()) @map("processed_at") @db.Timestamp(0)
  status              Status
  error_message       String?   @map("error_message") @db.Text
  drive_file_id       String    @map("drive_file_id") @db.VarChar(255)
  md5_checksum        String?   @map("md5_checksum") @db.VarChar(32)
  drive_modified_time DateTime  @map("drive_modified_time") @db.DateTime(0)
  game_uid            String?   @map("game_uid") @db.VarChar(100)
  game_date           DateTime? @db.Date

  @@index([md5_checksum], map: "idx_md5_checksum")
  @@map("processed_files")
}

model Player {
  uid         String        @id
  name        String
  nickname    String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now()) @updatedAt
  PlayerBadge PlayerBadge[]

  @@map("players")
}

model Badge {
  badge_id          String        @id @db.VarChar(36)
  quote             String        @db.Text
  short_description String        @db.VarChar(100)
  long_description  String        @db.Text
  criteria          String        @db.VarChar(100)
  category          String        @db.VarChar(30)
  rarity            Int           @db.TinyInt
  icon              String?       @db.VarChar(255)
  enabled           Boolean?      @default(true)
  created_at        DateTime      @default(now()) @db.DateTime(0)
  updated_at        DateTime      @default(now()) @updatedAt @db.DateTime(0)
  tier              String?       @db.TinyText
  players           PlayerBadge[]

  @@map("badges")
}

model PlayerBadge {
  id          Int       @id @default(autoincrement())
  player_uid  String    @db.VarChar(36)
  badge_id    String    @db.VarChar(36)
  earned_at   DateTime  @db.DateTime(0)
  quarter     String?   @db.VarChar(7)
  year        Int?
  game_id     String?   @db.VarChar(255)
  expiration  DateTime? @map("expiration") @db.Date
  description String?   @map("description") @db.Text
  CreatedAt   DateTime? @default(now()) @db.DateTime(0)
  player      Player    @relation(fields: [player_uid], references: [uid], onUpdate: Restrict, map: "player_badges_ibfk_1")
  badge       Badge     @relation(fields: [badge_id], references: [badge_id], onUpdate: Restrict, map: "player_badges_ibfk_2")

  @@unique([player_uid, badge_id, quarter, year], map: "player_uid")
  @@index([badge_id], map: "badge_id")
  @@index([expiration], map: "idx_player_badges_expiration")
  @@map("player_badges")
}

model poker_tournaments_test {
  id               Int       @id @default(autoincrement())
  Name             String?   @db.VarChar(255)
  UID              String?   @db.VarChar(255)
  Bust_Time        BigInt?
  Bust_Round       Int?
  Hitman           String?   @db.VarChar(255)
  Placement        Int?
  Knockouts        Int?
  Start_Points     Int?
  Hit_Points       Int?
  Placement_Points Int?
  Cash             Int?
  Place            String?   @db.VarChar(50)
  Season           String?   @db.VarChar(100)
  Venue            String?   @db.VarChar(255)
  Total_Points     Int?
  Player_Score     Float?    @db.Float
  File_name        String?   @db.VarChar(255)
  created_at       DateTime  @default(now()) @db.Timestamp(0)
  game_date        DateTime? @db.Date
  game_uid         String?   @db.VarChar(100)
}

model processed_files_test {
  id                  Int                         @id @default(autoincrement())
  filename            String                      @unique(map: "filename") @db.VarChar(255)
  processed_at        DateTime                    @default(now()) @db.Timestamp(0)
  status              processed_files_test_status
  error_message       String?                     @db.Text
  drive_file_id       String                      @db.VarChar(255)
  md5_checksum        String?                     @db.VarChar(32)
  drive_modified_time DateTime                    @db.DateTime(0)
  game_uid            String?                     @db.VarChar(100)
  game_date           DateTime?                   @db.Date

  @@index([md5_checksum], map: "idx_md5_checksum")
}

enum Status {
  success
  error
}

enum processed_files_test_status {
  success
  error
}

model TournamentDraft {
  id                        Int                   @id @default(autoincrement())
  tournament_date           DateTime              @db.Date
  director_name             String                @db.VarChar(255)
  venue                     String                @db.VarChar(255)
  start_points              Int                   @default(0)
  status                    TournamentDraftStatus @default(in_progress)
  created_by                String?               @db.VarChar(255)
  created_at                DateTime              @default(now()) @db.Timestamp(0)
  updated_at                DateTime              @default(now()) @updatedAt @db.Timestamp(0)
  game_uid                  String?               @db.VarChar(100)
  file_name                 String?               @db.VarChar(255)
  blind_schedule            String?               @default("standard") @db.VarChar(50)
  timer_current_level       Int?                  @default(1)
  timer_remaining_seconds   Int?
  timer_is_running          Boolean?              @default(false)
  timer_is_paused           Boolean?              @default(false)
  timer_last_updated        DateTime?             @db.Timestamp(0)

  // Relations
  players TournamentDraftPlayer[]

  @@index([status], map: "idx_status")
  @@index([tournament_date], map: "idx_tournament_date")
  @@index([game_uid], map: "idx_game_uid")
  @@map("tournament_drafts")
}

model TournamentDraftPlayer {
  id                  Int       @id @default(autoincrement())
  tournament_draft_id Int
  player_name         String    @db.VarChar(255)
  player_uid          String?   @db.VarChar(255)
  is_new_player       Boolean   @default(false)
  hitman_name         String?   @db.VarChar(255)
  ko_position         Int?
  placement           Int?
  added_by            String?   @db.VarChar(255)
  checked_in_at       DateTime? @db.Timestamp(0)
  created_at          DateTime  @default(now()) @db.Timestamp(0)
  updated_at          DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  // Relations
  tournament_draft TournamentDraft @relation(fields: [tournament_draft_id], references: [id], onDelete: Cascade)

  @@unique([tournament_draft_id, player_name], map: "unique_player_per_tournament")
  @@unique([tournament_draft_id, placement], map: "unique_placement_per_tournament")
  @@index([tournament_draft_id], map: "idx_tournament_draft_id")
  @@index([player_uid], map: "idx_player_uid")
  @@index([placement], map: "idx_placement")
  @@map("tournament_draft_players")
}

enum TournamentDraftStatus {
  in_progress
  finalized
  integrated
}
